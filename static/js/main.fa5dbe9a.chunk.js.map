{"version":3,"sources":["Dashboard/MetricTile/MetricTile.js","config.js","Dashboard/Dashboard.js","Theme/theme.js","App.js","serviceWorker.js","index.js"],"names":["MetricTile","renderValues","value","valueType","undefined","getFormatedTime","totalSeconds","format","val","Math","floor","slice","hours","minutes","seconds","finalFormat","this","props","name","current","limit","goal","wish","lastUpdated","type","Card","className","CardHeader","title","CardContent","Typography","color","component","Box","mt","fontSize","textAlign","top","moment","CardActions","Button","size","React","Component","URL","Dashboard","state","isLoadingMetrics","tiles","fetchMetrics","fetch","config","method","headers","Accept","then","response","json","data","setState","catch","error","console","log","displaySkeletons","Array","keys","map","x","Grid","item","key","Skeleton","variant","height","width","lineHeight","container","direction","justify","alignItems","spacing","tile","currentData","configuration","addedOn","metricType","theme","createMuiTheme","palette","primary","main","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa5dbe9a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport moment from \"moment\";\r\nimport {\r\n  Button,\r\n  Box,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardHeader,\r\n  Typography\r\n} from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.css\";\r\n\r\nclass MetricTile extends React.Component {\r\n  render() {\r\n    const { name, current, limit, goal, wish, lastUpdated, type } = this.props;\r\n\r\n    return (\r\n      <Card className=\"card\">\r\n        <CardHeader title={name} />\r\n        <CardContent>\r\n          <Typography color=\"textSecondary\" component=\"span\">\r\n            <Box>Current: {this.renderValues(current, type)}</Box>\r\n            <Box>Limit: {this.renderValues(limit, type)}</Box>\r\n            <Box>Goal: {this.renderValues(goal, type)}</Box>\r\n            <Box>Wish: {this.renderValues(wish, type)}</Box>\r\n            <Box\r\n              mt={1}\r\n              color=\"text.hint\"\r\n              fontSize={12}\r\n              textAlign=\"left\"\r\n              top={100}\r\n            >\r\n              Last updated:{\" \"}\r\n              {lastUpdated && moment(lastUpdated).format(\"HH:mm DD.MM.YYYY\")}\r\n            </Box>\r\n          </Typography>\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button size=\"small\" color=\"primary\">\r\n            Show Details\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  renderValues = (value, valueType) => {\r\n    if (value === undefined || value === null) {\r\n      return \"-\";\r\n    }\r\n\r\n    switch (valueType) {\r\n      case \"percentage\":\r\n        return `${value}%`;\r\n      case \"money\":\r\n        return `${value}â‚¬`;\r\n      case \"time\":\r\n        return this.getFormatedTime(value);\r\n      default:\r\n        return value;\r\n    }\r\n  };\r\n\r\n  getFormatedTime = totalSeconds => {\r\n    const format = val => `${Math.floor(val)}`.slice(-2);\r\n    const hours = format(totalSeconds / 3600);\r\n    const minutes = format((totalSeconds % 3600) / 60);\r\n    const seconds = format(totalSeconds % 60);\r\n\r\n    let finalFormat = hours > 0 ? `${hours}h ` : \"\";\r\n    finalFormat += minutes > 0 ? `${minutes}m ` : \"\";\r\n    finalFormat += seconds > 0 ? `${seconds}s ` : \"\";\r\n\r\n    return finalFormat;\r\n  };\r\n}\r\n\r\nMetricTile.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  current: PropTypes.number,\r\n  limit: PropTypes.number.isRequired,\r\n  goal: PropTypes.number,\r\n  wish: PropTypes.number,\r\n  lastUpdated: PropTypes.string,\r\n  type: PropTypes.string\r\n};\r\n\r\nexport default MetricTile;\r\n","export default {\r\n  api: {\r\n    URL: \"https://localhost:44360\"\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { Box, Grid, Typography } from \"@material-ui/core\";\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport MetricTile from \"./MetricTile\";\r\nimport \"./styles.css\";\r\nimport config from \"../config\";\r\n\r\nclass Dashboard extends React.Component {\r\n  state = {\r\n    isLoadingMetrics: true,\r\n    tiles: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchMetrics();\r\n  }\r\n\r\n  fetchMetrics = () => {\r\n    fetch(config.api.URL + `/tiles/all`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n      .then(response => response.json())\r\n      .then(data =>\r\n        this.setState({ tiles: [...data], isLoadingMetrics: false })\r\n      )\r\n      .catch(error => {\r\n        this.setState({ isLoadingMetrics: false });\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { tiles, isLoadingMetrics } = this.state;\r\n\r\n    return (\r\n      <div className=\"main\">\r\n        <Typography variant=\"h2\" color=\"primary\">\r\n          <Box lineHeight={2} textAlign=\"center\">\r\n            Tiles\r\n          </Box>\r\n        </Typography>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"center\"\r\n          alignItems=\"flex-start\"\r\n          className=\"dashboard-grid\"\r\n          spacing={4}\r\n        >\r\n          {isLoadingMetrics && this.displaySkeletons()}\r\n          {!isLoadingMetrics &&\r\n            tiles &&\r\n            tiles.map(tile => (\r\n              <Grid item key={tile.name}>\r\n                <MetricTile\r\n                  name={tile.name}\r\n                  current={tile.currentData.value}\r\n                  limit={tile.configuration?.limit}\r\n                  goal={tile.configuration?.goal}\r\n                  wish={tile.configuration?.wish}\r\n                  lastUpdated={tile.currentData.addedOn}\r\n                  type={tile.configuration?.metricType}\r\n                />\r\n              </Grid>\r\n            ))}\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  displaySkeletons = () =>\r\n    [...Array(4).keys()].map(x => (\r\n      <Grid item key={x}>\r\n        <Skeleton variant=\"rect\" height={270} width={275} />\r\n      </Grid>\r\n    ));\r\n}\r\n\r\nexport default Dashboard;\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n    primary: {\r\n      main: \"#6decb9\"\r\n    }\r\n  }\r\n});\r\n\r\nexport default theme;\r\n","import React from \"react\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport theme from \"./Theme/theme\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className=\"App\">\r\n        <Dashboard />\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}