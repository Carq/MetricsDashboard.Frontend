{"version":3,"sources":["config.js","tiles/constants.js","tiles/propTypes.js","tiles/utils.js","tiles/components/histogram/histogram.js","tiles/components/weatherTileContent/weatherTileContent.js","tiles/components/metricTileContent/metricTileContent.js","tiles/components/tile/tile.js","tiles/components/dashboard/dashboard.js","tiles/container/dashboard.js","tiles/actions.js","tiles/actionTypes.js","Theme/theme.js","tiles/reducers.js","rootReducer.js","App.js","configuration/configStore.js","serviceWorker.js","index.js"],"names":["URL","name","refreshInterval","tileTypes","WEATHER","METRIC","metricTypes","PERCENTAGE","MONEY","TIME","colorStatuses","PropTypes","shape","string","isRequired","type","oneOf","Object","values","limit","number","wish","goal","metricType","temperature","humidity","addedOn","value","date","colorStatusToClassNames","colorStatus","green","amber","red","blue","aqua","colorStatusToBackgroundClassNames","Histogram","calculateRank","min","max","minimalStep","step","Math","toFixed","this","props","data","colorData","valueSuffix","sortedData","_","sortBy","maxBy","minBy","className","map","x","tooltipText","localTime","Date","minutes","getMinutes","padStart","getHours","convertToTimeOnly","Tooltip","key","uniqueId","TransitionComponent","Zoom","title","arrow","classNames","React","Component","defaultProps","WeatherTileContent","calculateTemperatureColor","Box","justifyContent","item","Typography","variant","align","color","mt","MetricTileContent","renderTableRow","metricStatus","TableRow","TableCell","renderValues","valueType","undefined","getFormatedTime","calculateStatusGreater","current","calculateStatusSmaller","totalSeconds","format","val","floor","slice","hours","seconds","finalFormat","configuration","Table","size","style","width","TableBody","Tile","renderTileContent","renderWeatherTileContent","renderMetricTileContent","renderUnsupportedTile","currentData","recentData","textAlign","fontSize","basicData","lastUpdated","Card","metric","weather","CardHeader","CardContent","CardActions","m","disableSpacing","top","moment","Dashboard","state","lastTilesAmount","lastUpdatedTile","displaySkeletons","Array","parseInt","keys","Grid","Skeleton","height","componentDidMount","getAllTiles","localStorage","getItem","setState","refreshTileInterval","setInterval","refreshTile","config","tileToRefresh","getTile","tiles","tileIndex","findIndex","length","clearInterval","prevProps","error","enqueueSnackbar","isLoadingMetrics","setItem","lineHeight","container","direction","justify","alignItems","spacing","tile","connect","items","dispatch","fetch","then","response","status","Error","json","getAllTilesCompleted","catch","getAllTilesFailed","message","tileName","tileType","getTileRequest","getTileCompleted","getTileFailed","withSnackbar","theme","createMuiTheme","palette","primary","main","overrides","MuiTooltip","tooltip","initialState","updateTileDataInArray","updatedTile","combineReducers","action","store","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","rootReducer","applyMiddleware","thunkMiddleware","configStore","App","ThemeProvider","Helmet","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4bAAe,EACR,CACHA,IAAK,0BAFM,EAIF,CACTC,KAAM,QACNC,gBAAiB,K,2LCNRC,EAAY,CACvBC,QAAS,UACTC,OAAQ,UAGGC,EAAc,CACzBC,WAAY,aACZC,MAAO,QACPC,KAAM,QAGKC,EACJ,QADIA,EAEC,aAFDA,EAGJ,QAHIA,EAIN,MAJMA,EAKL,OALKA,EAMA,YANAA,EAOL,O,OCfqBC,YAAUC,MAAM,CAC3CX,KAAMU,YAAUE,OAAOC,WACvBC,KAAMJ,YAAUK,MAAMC,OAAOC,OAAOf,MAGHQ,YAAUC,MAAM,CACjDO,MAAOR,YAAUS,OAAON,WACxBO,KAAMV,YAAUS,OAChBE,KAAMX,YAAUS,OAChBG,WAAYZ,YAAUK,MAAMC,OAAOC,OAAOZ,IAAcQ,aAG/BH,YAAUC,MAAM,CACzCY,YAAab,YAAUS,OAAON,WAC9BW,SAAUd,YAAUS,OACpBM,QAASf,YAAUE,OAAOC,aAGCH,YAAUC,MAAM,CAC3Ce,MAAOhB,YAAUS,OAAON,WACxBc,KAAMjB,YAAUE,OAAOC,aCrBlB,SAASe,EAAwBC,GACtC,GAAKA,EAEL,MAAO,CACLC,MAAOD,IAAgBpB,EACvB,cAAeoB,IAAgBpB,EAC/BsB,MAAOF,IAAgBpB,EACvBuB,IAAKH,IAAgBpB,EACrBwB,KAAMJ,IAAgBpB,EACtB,aAAcoB,IAAgBpB,EAC9ByB,KAAML,IAAgBpB,GAInB,SAAS0B,EAAkCN,GAChD,GAAKA,EAEL,MAAO,CACL,mBAAoBA,IAAgBpB,EACpC,yBAA0BoB,IAAgBpB,EAC1C,mBAAoBoB,IAAgBpB,EACpC,iBAAkBoB,IAAgBpB,EAClC,kBAAmBoB,IAAgBpB,EACnC,wBAAyBoB,IAAgBpB,EACzC,kBAAmBoB,IAAgBpB,G,sBCbjC2B,G,mNA2CJC,cAAgB,SAACX,EAAOY,EAAKC,EAAKC,GAChC,GAAIF,IAAQC,EAAK,OAAO,EAExB,IAAME,EAAOC,KAAKH,MAAMA,EAAMD,GAAO,GAAGK,QAAQ,GAAIH,GACpD,OAAId,GAASa,EAAY,EACrBb,GAASa,EAAME,EAAa,EAC5Bf,GAASa,EAAa,EAAPE,EAAiB,EAChCf,GAASa,EAAa,EAAPE,EAAiB,EAC7B,G,uDAlDC,IAAD,SAC+CG,KAAKC,MAAnDC,EADD,EACCA,KAAMC,EADP,EACOA,UAAWC,EADlB,EACkBA,YAAaR,EAD/B,EAC+BA,YAEhCS,EAAaC,IAAEC,OAAOL,EAAM,QAC5BP,EAAMG,KAAKH,IAAIW,IAAEE,MAAMN,EAAM,SAAd,OACfR,EAAMI,KAAKJ,IAAIY,IAAEG,MAAMP,EAAM,SAAd,OAErB,OACE,yBAAKQ,UAAU,aACb,yBAAKA,UAAU,mBACZL,EAAWM,KAAI,SAACC,GACf,IAAMC,EAAW,UAAMD,EAAE9B,OAAR,OACfsB,GAAe,GADA,YDKtB,SAA2BrB,GAChC,IAAI+B,EAAY,IAAIC,KAAKhC,GACrBiC,EAAU,UAAGF,EAAUG,cAAeC,SAAS,EAAG,KACtD,MAAM,GAAN,OAAUJ,EAAUK,WAApB,YAAkCH,GCNpBI,CAAkBR,EAAE7B,OAExB,OACE,kBAACsC,EAAA,EAAD,CACEC,IAAKhB,IAAEiB,WACPC,oBAAqBC,IACrBC,MAAOb,EACPc,OAAK,GAEL,yBACEjB,UAAWkB,IAAW,kBAAD,OACD,EAAKnC,cACrBmB,EAAE9B,MACFY,EACAC,EACAC,IAEFO,GACEZ,EAAkCY,EAAUS,EAAE9B,qB,GAhC5C+C,IAAMC,YA8D9BtC,EAAUuC,aAAe,CACvBnC,YAAa,IAGAJ,QCEAwC,G,mNAfbC,0BAA4B,SAACtD,GAC3B,OAAIA,EAAc,GAAWd,EACzBc,EAAc,GAAWd,EACzBc,EAAc,GAAWd,EACzBc,EAAc,EAAUd,EACrBA,G,uDA5DC,IAAD,EACiCmC,KAAKC,MAArCtB,EADD,EACCA,YAAaC,EADd,EACcA,SAAUsB,EADxB,EACwBA,KAE3BjB,EAAce,KAAKiC,0BAA0BtD,GAEjD,OACE,yBAAK+B,UAAU,yBACb,kBAACwB,EAAA,EAAD,CAAKC,eAAe,UAClB,yBAAKzB,UAAU,yBACb,yBAAKA,UAAU,uCACb,kBAAC,EAAD,CACER,KAAMA,EAAKS,KAAI,SAACyB,GAAD,MAAW,CACxBtD,MAAOsD,EAAKzD,YACZI,KAAMqD,EAAKvD,YAEbuB,YAAa,QACbD,UAAWH,KAAKiC,6BAGpB,kBAACI,EAAA,EAAD,CACE3B,UAAWkB,IAAW5C,EAAwBC,IAC9CqD,QAAQ,KACRC,MAAM,UAHR,UAIK5D,EAAYoB,QAAQ,GAJzB,WAOF,kBAACsC,EAAA,EAAD,CAAYE,MAAM,SAASC,MAAM,iBAAjC,gBAIF,kBAACN,EAAA,EAAD,CAAKO,GAAI,GACP,yBAAK/B,UAAU,yBACb,yBAAKA,UAAU,oCACb,kBAAC,EAAD,CACER,KAAMA,EAAKS,KAAI,SAACyB,GAAD,MAAW,CACxBtD,MAAOsD,EAAKxD,SACZG,KAAMqD,EAAKvD,YAEbuB,YAAa,IACbR,YAAa,EACbO,UAAW,kBAAMtC,MAGrB,kBAACwE,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAA/B,UAA4C3D,EAASmB,QACnD,GADF,OAIF,kBAACsC,EAAA,EAAD,CAAYE,MAAM,SAASC,MAAM,iBAAjC,kB,GAhDuBX,IAAMC,Y,uCC2FxBY,I,mNA/DbC,eAAiB,SAACvF,EAAM0B,EAAOJ,EAAYkE,GAA1B,OACf,kBAACC,EAAA,EAAD,CAAUvB,IAAKlE,GACb,kBAAC0F,GAAA,EAAD,CAAWP,MAAM,SACf,kBAACF,EAAA,EAAD,KAAajF,IAEf,kBAAC0F,GAAA,EAAD,CAAWP,MAAM,UACf,kBAACF,EAAA,EAAD,CACE3B,UAAWkB,IAAW5C,EAAwB4D,KAE7C,EAAKG,aAAajE,EAAOJ,O,EAMlCqE,aAAe,SAACjE,EAAOkE,GACrB,QAAcC,IAAVnE,GAAiC,OAAVA,EACzB,MAAO,IAGT,OAAQkE,GACN,IAAK,aACH,MAAM,GAAN,OAAUlE,EAAV,KACF,IAAK,QACH,MAAM,GAAN,OAAUA,EAAV,UACF,IAAK,OACH,OAAO,EAAKoE,gBAAgBpE,GAC9B,QACE,OAAOA,I,EAIbqE,uBAAyB,SAACC,EAAS9E,GACjC,MAAc,IAAV8E,EAAiB9E,EAAcT,EAC/BuF,EAAU9E,EAAcT,EACrBA,G,EAGTwF,uBAAyB,SAACD,EAAS9E,GACjC,OAAc,KAAV8E,EAAiB9E,EAAcT,EAC/BuF,EAAU9E,EAAcT,EACrBA,G,EAGTqF,gBAAkB,SAACI,GACjB,IAAMC,EAAS,SAACC,GAAD,MAAS,UAAG1D,KAAK2D,MAAMD,IAAOE,OAAO,IAC9CC,EAAQJ,EAAOD,EAAe,MAC9BtC,EAAUuC,EAAQD,EAAe,KAAQ,IACzCM,EAAUL,EAAOD,EAAe,IAElCO,EAAcF,EAAQ,EAAR,UAAeA,EAAf,MAA2B,GAI7C,OAHAE,GAAe7C,EAAU,EAAV,UAAiBA,EAAjB,MAA+B,GAC9C6C,GAAeD,EAAU,EAAV,UAAiBA,EAAjB,MAA+B,I,uDA1EtC,IAAD,EAC4B5D,KAAKC,MAAhCmD,EADD,EACCA,QAASU,EADV,EACUA,cACTpF,EAAkCoF,EAAlCpF,WAAYJ,EAAsBwF,EAAtBxF,MAAOE,EAAesF,EAAftF,KAAMC,EAASqF,EAATrF,KAC3BmE,EACJlE,IAAejB,EAAYC,WACvBsC,KAAKmD,uBAAuBC,EAAS9E,GACrC0B,KAAKqD,uBAAuBD,EAAS9E,GAE3C,OACE,yBAAKoC,UAAU,uBACb,kBAACqD,GAAA,EAAD,CAAOC,KAAK,QAAQC,MAAO,CAAEC,MAAO,MAClC,kBAACC,GAAA,EAAD,KACGnE,KAAK2C,eAAe,UAAWS,EAAS1E,EAAYkE,GACpD5C,KAAK2C,eAAe,QAASrE,EAAOI,GACpCsB,KAAK2C,eAAe,OAAQlE,EAAMC,GAClCsB,KAAK2C,eAAe,OAAQnE,EAAME,U,GAhBfmD,IAAMC,YCoEvBsC,I,mNAxCbC,kBAAoB,SAACnG,GAAU,IAAD,EACI,EAAK+B,MAA7BC,EADoB,EACpBA,KAAM4D,EADc,EACdA,cAEd,OAAQ5F,GACN,KAAKZ,EAAUC,QACb,OAAO,EAAK+G,yBAAyBpE,EAAK,GAAIA,EAAKwD,MAAM,IAC3D,KAAKpG,EAAUE,OACb,OAAO,EAAK+G,wBAAwBrE,EAAK,GAAI4D,GAC/C,QACE,OAAO,EAAKU,0B,EAIlBF,yBAA2B,SAACG,EAAaC,GAAd,OACzB,kBAAC,EAAD,CACE/F,YAAa8F,EAAY9F,YACzBC,SAAU6F,EAAY7F,SACtBsB,KAAMwE,K,EAIVH,wBAA0B,SAACrE,EAAM4D,GAAP,OACxB,kBAAC,GAAD,CAAmBV,QAASlD,EAAKpB,MAAOgF,cAAeA,K,EAGzDU,sBAAwB,kBACtB,kBAACtC,EAAA,EAAD,CAAKyC,UAAU,UACb,kBAAC,IAAD,CAA2BC,SAAS,QAAQpC,MAAM,UAClD,kBAACH,EAAA,EAAD,CAAYG,MAAM,SAAlB,sB,uDAnDM,IAAD,EACqBxC,KAAKC,MAAzB4E,EADD,EACCA,UACFC,EAFC,EACY5E,KACM,GAAGrB,QAE5B,OACE,kBAACkG,EAAA,EAAD,CACErE,UAAWkB,IAAW,OAAQ,CAC5BoD,OAAQH,EAAU3G,OAASZ,EAAUE,OACrCyH,QAASJ,EAAU3G,OAASZ,EAAUC,WAGxC,kBAAC2H,EAAA,EAAD,CAAYxE,UAAU,cAAcgB,MAAOmD,EAAUzH,OACrD,kBAAC+H,EAAA,EAAD,KAAcnF,KAAKqE,kBAAkBQ,EAAU3G,OAC/C,kBAACkH,EAAA,EAAD,CAAaC,EAAG,EAAGC,gBAAc,GAC/B,kBAACpD,EAAA,EAAD,CAAKM,MAAM,YAAYoC,SAAU,GAAID,UAAU,OAAOY,IAAK,KAA3D,gBACgB,IACbT,GAAeU,IAAOV,GAAavB,OAAO,2B,GAjBpC1B,IAAMC,YC6GV2D,I,mNAtHbC,MAAQ,CAAEC,gBAAiB,EAAGC,gBAAiB,M,EAE/CC,iBAAmB,WAAO,IAChBF,EAAoB,EAAKD,MAAzBC,gBACR,OAAO,YAAIG,MAAMC,SAASJ,IAAkBK,QAAQrF,KAAI,SAACC,GAAD,OACtD,kBAACqF,EAAA,EAAD,CAAM7D,MAAI,EAACd,IAAKV,GACd,kBAACsF,EAAA,EAAD,CAAU5D,QAAQ,OAAO6D,OAAQ,IAAKjC,MAAO,W,EAKnDkC,kBAAoB,WAAO,IACjBC,EAAgB,EAAKpG,MAArBoG,YACJV,EAAkBW,aAAaC,QAAQ,mBACvCZ,GACF,EAAKa,SAAS,CACZb,oBAIJ,EAAKc,oBAAsBC,aACzB,kBAAM,EAAKC,gBACgC,KAA1CC,EAAiBvJ,iBAAmB,KAGvCgJ,K,EAwDFM,YAAc,WAAO,IAGfE,EAHc,EACS,EAAK5G,MAAxB6G,EADU,EACVA,QAASC,EADC,EACDA,MACTnB,EAAoB,EAAKF,MAAzBE,gBAGR,GAAIA,EAAiB,CACnB,IAAIoB,EAAY1G,IAAE2G,UAAUF,EAAO,CACjC3J,KAAMwI,EAAgBxI,KACtBc,KAAM0H,EAAgB1H,SAGlB8I,EAAYD,EAAMG,SACtBF,EAAY,GAGdH,EAAgBE,EAAMC,GAKxBF,GAFAD,EAAgBA,GAAiBE,EAAM,IAEjB3J,KAAMyJ,EAAc3I,MAC1C,EAAKsI,SAAS,CACZZ,gBAAiB,CACfxI,KAAMyJ,EAAczJ,KACpBc,KAAM2I,EAAc3I,S,qEA5ExBiJ,cAAcnH,KAAKyG,uB,yCAGFW,GAAY,IAAD,EACgCpH,KAAKC,MAAzDoH,EADoB,EACpBA,MAAOC,EADa,EACbA,gBAAiBP,EADJ,EACIA,MAAOQ,EADX,EACWA,iBACnCH,EAAUC,QAAUA,GAASA,GAC/BC,EAAgBD,EAAO,CACrB/E,QAAS,UAIT8E,EAAUL,MAAMG,SAAWH,EAAMG,QAAWK,GAC9CjB,aAAakB,QAAQ,kBAAmBT,EAAMG,U,+BAIxC,IAAD,EAC6BlH,KAAKC,MAAjC8G,EADD,EACCA,MAAOQ,EADR,EACQA,iBAEf,OACE,yBAAK7G,UAAU,QACb,kBAAC2B,EAAA,EAAD,CAAYC,QAAQ,KAAKE,MAAM,WAC7B,kBAACN,EAAA,EAAD,CAAKuF,WAAY,EAAG9C,UAAU,UAC3BiC,EAAiBxJ,MAAQ,UAG9B,kBAAC6I,EAAA,EAAD,CACEyB,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,aACXnH,UAAU,iBACVoH,QAAS,GAERP,GAAoBvH,KAAK6F,oBACxB0B,GACAR,GACAA,EAAMpG,KAAI,SAACoH,GAAD,OACR,kBAAC9B,EAAA,EAAD,CAAM7D,MAAI,EAACd,IAAKyG,EAAK3K,MACnB,kBAAC,GAAD,CACEyH,UAAW,CAAEzH,KAAM2K,EAAK3K,KAAMc,KAAM6J,EAAK7J,MACzCgC,KAAM6H,EAAK7H,KACX4D,cAAeiE,EAAKjE,cACpBgB,YAAaiD,EAAK7H,KAAK,GAAGrB,oB,GAzEpBgD,IAAMC,YCWfkG,gBAfS,SAACtC,GACvB,MAAO,CACLqB,MAAOrB,EAAMqB,MAAMkB,MACnBV,iBAAkB7B,EAAMqB,MAAMQ,iBAC9BF,MAAO3B,EAAMqB,MAAMM,UAII,SAACa,GAC1B,MAAO,CACL7B,YAAa,kBAAM6B,GC2Bd,SAAUA,GAGf,OAFAA,EA/BK,CAAEhK,KCZ0B,0BD6C1BiK,IAAM,GAAD,OAAIvB,EAAWzJ,IAAf,eACTiL,MAAK,SAACC,GACL,GAAIA,EAASC,QAAU,IACrB,MAAM,IAAIC,MAAM,4BAGlB,OAAOF,EAASG,UAEjBJ,MAAK,SAACI,GAAD,OAAUN,EAtCf,SAA8BM,GACnC,MAAO,CACLtK,KChBmC,0BDiBnC6I,MAAOyB,GAmCoBC,CAAqBD,OAC7CE,OAAM,SAACrB,GAAD,OAAWa,EAhCjB,SAA2Bb,GAChC,MAAO,CACLnJ,KCtBgC,uBDuBhCmJ,MAAOA,GA6BsBsB,CAAkBtB,EAAMuB,iBDtCrD9B,QAAS,SAAC+B,EAAUC,GAAX,OAAwBZ,EC0C9B,SAAiBW,EAAUC,GAChC,OAAO,SAAUZ,GAGf,OAFAA,EA/BG,SAAwBW,EAAUC,GACvC,MAAO,CAAE5K,KC1BqB,mBD0BG2K,WAAUC,YA8BhCC,CAAeF,EAAUC,IAE3BX,IAAM,GAAD,OAAIvB,EAAWzJ,IAAf,kBAA4B2L,EAA5B,YAAwCD,EAAxC,YACTT,MAAK,SAACC,GACL,GAAIA,EAASC,QAAU,IACrB,MAAM,IAAIC,MAAM,4BAGlB,OAAOF,EAASG,UAEjBJ,MAAK,SAACI,GAAD,OAAUN,EArCf,SAA0BM,EAAMK,EAAUC,GAC/C,MAAO,CAAE5K,KC7BuB,qBD6BGgC,KAAMsI,EAAMK,WAAUC,YAoC5BE,CAAiBR,EAAMK,EAAUC,OACzDJ,OAAM,SAACrB,GAAD,OAAWa,EAlCjB,SAAuBb,GAC5B,MAAO,CAAEnJ,KChCoB,kBDgCGmJ,MAAOA,GAiCR4B,CAAc5B,EAAMuB,cDvDP9B,CAAQ+B,EAAUC,QAIjDd,CAGbkB,uBAAazD,K,UGLA0D,GAhBDC,aAAe,CAC3BC,QAAS,CACPnL,KAAM,OACNoL,QAAS,CACPC,KAAM,YAGVC,UAAW,CACTC,WAAY,CACVC,QAAS,CACP9E,SAAU,W,4BCHZ+E,GAAe,CACnB1B,MAAO,GACPV,kBAAkB,EAClBF,MAAO,IAgDT,SAASuC,GAAsB7C,EAAO8B,EAAUC,EAAU5I,GACxD,OAAO6G,EAAMpG,KAAI,SAACoH,GAChB,GAAIA,EAAK3K,OAASyL,GAAYd,EAAK7J,OAAS4K,EAC1C,OAAOf,EAGT,IAAM8B,EAAW,gBACZ9B,EADY,CAEf7H,KAAMA,IAGR,OAAO,gBACF6H,EADL,GAEK8B,MCtEMC,oBAAgB,CAAE/C,MDY1B,WAAqD,IAA/BrB,EAA8B,uDAAtBiE,GAAcI,EAAQ,uCACzD,OAAQA,EAAO7L,MACb,IFjBiC,wBEkB/B,OAAO,gBACFwH,EADL,CAEE6B,kBAAkB,IAEtB,IFrBmC,0BEsBjC,OAAO,gBACF7B,EADL,CAEEuC,MAAO8B,EAAOhD,MACdQ,kBAAkB,IAEtB,IF1BgC,uBE2B9B,OAAO,gBACF7B,EADL,CAEE2B,MAAO0C,EAAO1C,MACdE,kBAAkB,IAEtB,IF9B4B,mBE+B1B,OAAO,gBACF7B,GAEP,IFjC8B,qBEiC9B,IACUuC,EAAUvC,EAAVuC,MAER,OAAO,gBACFvC,EADL,CAEEuC,MAAO2B,GACL3B,EACA8B,EAAOlB,SACPkB,EAAOjB,SACPiB,EAAO7J,QAGb,IF5C2B,kBE6CzB,OAAO,gBACFwF,EADL,CAEE2B,MAAO0C,EAAO1C,QAElB,QACE,OAAO3B,M,WE5CPsE,GCRS,WACb,IAAMC,EACJC,OAAOC,sCAAwCC,KAEjD,OAAOC,aACLC,GACAL,EAAiBM,aAAgBC,QDEvBC,GAmBCC,OAjBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAexB,MAAOA,IACpB,kBAAC,IAAD,CAAUa,MAAOA,IACf,yBAAKtJ,UAAU,OACb,kBAACkK,EAAA,OAAD,KACE,+BAAQhE,EAAiBxJ,MAAQ,oBAEnC,kBAAC,mBAAD,KACE,kBAAC,GAAD,WEXQyN,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,MAAK,SAAAoD,GACjCA,EAAaC,kB","file":"static/js/main.c4ba20b4.chunk.js","sourcesContent":["export default {\r\n  api: {\r\n    URL: \"https://localhost:5001\",\r\n  },\r\n  dashboard: {\r\n    name: \"Tiles\",\r\n    refreshInterval: 180, // seconds\r\n  },\r\n};\r\n","export const tileTypes = {\r\n  WEATHER: \"weather\",\r\n  METRIC: \"metric\",\r\n};\r\n\r\nexport const metricTypes = {\r\n  PERCENTAGE: \"percentage\",\r\n  MONEY: \"money\",\r\n  TIME: \"time\",\r\n};\r\n\r\nexport const colorStatuses = {\r\n  GREEN: \"green\",\r\n  LIGHTGREEN: \"lightgreen\",\r\n  AMBER: \"amber\",\r\n  RED: \"red\",\r\n  BLUE: \"blue\",\r\n  LIGHTBLUE: \"lightBlue\",\r\n  AQUA: \"aqua\",\r\n};\r\n","import { PropTypes } from \"prop-types\";\r\nimport { tileTypes, metricTypes } from \"./constants\";\r\n\r\nexport const tileBasicData = PropTypes.shape({\r\n  name: PropTypes.string.isRequired,\r\n  type: PropTypes.oneOf(Object.values(tileTypes)),\r\n});\r\n\r\nexport const metricConfiguration = PropTypes.shape({\r\n  limit: PropTypes.number.isRequired,\r\n  wish: PropTypes.number,\r\n  goal: PropTypes.number,\r\n  metricType: PropTypes.oneOf(Object.values(metricTypes)).isRequired,\r\n});\r\n\r\nexport const weatherData = PropTypes.shape({\r\n  temperature: PropTypes.number.isRequired,\r\n  humidity: PropTypes.number,\r\n  addedOn: PropTypes.string.isRequired,\r\n});\r\n\r\nexport const histogramData = PropTypes.shape({\r\n  value: PropTypes.number.isRequired,\r\n  date: PropTypes.string.isRequired,\r\n});\r\n","import { colorStatuses } from \"./constants\";\r\n\r\nexport function colorStatusToClassNames(colorStatus) {\r\n  if (!colorStatus) return;\r\n\r\n  return {\r\n    green: colorStatus === colorStatuses.GREEN,\r\n    \"light-green\": colorStatus === colorStatuses.LIGHTGREEN,\r\n    amber: colorStatus === colorStatuses.AMBER,\r\n    red: colorStatus === colorStatuses.RED,\r\n    blue: colorStatus === colorStatuses.BLUE,\r\n    \"light-blue\": colorStatus === colorStatuses.LIGHTBLUE,\r\n    aqua: colorStatus === colorStatuses.AQUA,\r\n  };\r\n}\r\n\r\nexport function colorStatusToBackgroundClassNames(colorStatus) {\r\n  if (!colorStatus) return;\r\n\r\n  return {\r\n    \"background-green\": colorStatus === colorStatuses.GREEN,\r\n    \"background-light-green\": colorStatus === colorStatuses.LIGHTGREEN,\r\n    \"background-amber\": colorStatus === colorStatuses.AMBER,\r\n    \"background-red\": colorStatus === colorStatuses.RED,\r\n    \"background-blue\": colorStatus === colorStatuses.BLUE,\r\n    \"background-light-blue\": colorStatus === colorStatuses.LIGHTBLUE,\r\n    \"background-aqua\": colorStatus === colorStatuses.AQUA,\r\n  };\r\n}\r\n\r\nexport function convertToTimeOnly(date) {\r\n  var localTime = new Date(date);\r\n  var minutes = `${localTime.getMinutes()}`.padStart(2, \"0\");\r\n  return `${localTime.getHours()}:${minutes}`;\r\n}\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Tooltip, Zoom } from \"@material-ui/core\";\r\nimport _ from \"lodash\";\r\nimport {\r\n  colorStatusToBackgroundClassNames,\r\n  convertToTimeOnly,\r\n} from \"../../utils\";\r\nimport { histogramData } from \"../../propTypes\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nclass Histogram extends React.Component {\r\n  render() {\r\n    const { data, colorData, valueSuffix, minimalStep } = this.props;\r\n\r\n    const sortedData = _.sortBy(data, \"date\");\r\n    const max = Math.max(_.maxBy(data, \"value\")[\"value\"]);\r\n    const min = Math.min(_.minBy(data, \"value\")[\"value\"]);\r\n\r\n    return (\r\n      <div className=\"histogram\">\r\n        <div className=\"histogram__bars\">\r\n          {sortedData.map((x) => {\r\n            const tooltipText = `${x.value}${\r\n              valueSuffix || \"\"\r\n            } ${convertToTimeOnly(x.date)}`;\r\n\r\n            return (\r\n              <Tooltip\r\n                key={_.uniqueId()}\r\n                TransitionComponent={Zoom}\r\n                title={tooltipText}\r\n                arrow\r\n              >\r\n                <div\r\n                  className={classNames(\r\n                    `histogram__bar-${this.calculateRank(\r\n                      x.value,\r\n                      min,\r\n                      max,\r\n                      minimalStep\r\n                    )}`,\r\n                    colorData &&\r\n                      colorStatusToBackgroundClassNames(colorData(x.value))\r\n                  )}\r\n                />\r\n              </Tooltip>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  calculateRank = (value, min, max, minimalStep) => {\r\n    if (min === max) return 3;\r\n\r\n    const step = Math.max(((max - min) / 4).toFixed(1), minimalStep);\r\n    if (value >= max) return 5;\r\n    if (value >= max - step) return 4;\r\n    if (value >= max - step * 2) return 3;\r\n    if (value >= max - step * 3) return 2;\r\n    return 1;\r\n  };\r\n}\r\n\r\nHistogram.propTypes = {\r\n  data: PropTypes.arrayOf(histogramData),\r\n  colorData: PropTypes.func,\r\n  valueSuffix: PropTypes.string,\r\n  minimalStep: PropTypes.number,\r\n};\r\n\r\nHistogram.defaultProps = {\r\n  minimalStep: 0.1,\r\n};\r\n\r\nexport default Histogram;\r\n","import React from \"react\";\r\nimport { Box, Typography } from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport { colorStatuses } from \"../../constants\";\r\nimport { colorStatusToClassNames } from \"../../utils\";\r\nimport { weatherData } from \"../../propTypes\";\r\nimport Histogram from \"../histogram\";\r\nimport classNames from \"classnames\";\r\nimport \"./styles.css\";\r\n\r\nclass WeatherTileContent extends React.Component {\r\n  render() {\r\n    const { temperature, humidity, data } = this.props;\r\n\r\n    var colorStatus = this.calculateTemperatureColor(temperature);\r\n\r\n    return (\r\n      <div className=\"weather-tile__content\">\r\n        <Box justifyContent=\"center\">\r\n          <div className=\"weather-tile__section\">\r\n            <div className=\"weather-tile__temperature-histogram\">\r\n              <Histogram\r\n                data={data.map((item) => ({\r\n                  value: item.temperature,\r\n                  date: item.addedOn,\r\n                }))}\r\n                valueSuffix={\"°C\"}\r\n                colorData={this.calculateTemperatureColor}\r\n              />\r\n            </div>\r\n            <Typography\r\n              className={classNames(colorStatusToClassNames(colorStatus))}\r\n              variant=\"h3\"\r\n              align=\"center\"\r\n            >{`${temperature.toFixed(1)}°C`}</Typography>\r\n          </div>\r\n\r\n          <Typography align=\"center\" color=\"textSecondary\">\r\n            Temperature\r\n          </Typography>\r\n        </Box>\r\n        <Box mt={2}>\r\n          <div className=\"weather-tile__section\">\r\n            <div className=\"weather-tile__humidity-histogram\">\r\n              <Histogram\r\n                data={data.map((item) => ({\r\n                  value: item.humidity,\r\n                  date: item.addedOn,\r\n                }))}\r\n                valueSuffix={\"%\"}\r\n                minimalStep={1}\r\n                colorData={() => colorStatuses.AQUA}\r\n              />\r\n            </div>\r\n            <Typography variant=\"h5\" align=\"center\">{`${humidity.toFixed(\r\n              0\r\n            )}%`}</Typography>\r\n          </div>\r\n          <Typography align=\"center\" color=\"textSecondary\">\r\n            Humidity\r\n          </Typography>\r\n        </Box>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  calculateTemperatureColor = (temperature) => {\r\n    if (temperature > 25) return colorStatuses.RED;\r\n    if (temperature > 23) return colorStatuses.AMBER;\r\n    if (temperature > 19) return colorStatuses.LIGHTGREEN;\r\n    if (temperature > 4) return colorStatuses.LIGHTBLUE;\r\n    return colorStatuses.BLUE;\r\n  };\r\n}\r\n\r\nWeatherTileContent.propTypes = {\r\n  temperature: PropTypes.number.isRequired,\r\n  humidity: PropTypes.number,\r\n  data: PropTypes.arrayOf(weatherData),\r\n};\r\n\r\nexport default WeatherTileContent;\r\n","import React from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport \"./styles.scss\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\nimport { metricConfiguration } from \"../../propTypes\";\r\nimport { colorStatuses, metricTypes } from \"../../constants\";\r\nimport { colorStatusToClassNames } from \"../../utils\";\r\n\r\nclass MetricTileContent extends React.Component {\r\n  render() {\r\n    const { current, configuration } = this.props;\r\n    const { metricType, limit, wish, goal } = configuration;\r\n    const metricStatus =\r\n      metricType === metricTypes.PERCENTAGE\r\n        ? this.calculateStatusGreater(current, limit)\r\n        : this.calculateStatusSmaller(current, limit);\r\n\r\n    return (\r\n      <div className=\"metric-tile-content\">\r\n        <Table size=\"small\" style={{ width: 200 }}>\r\n          <TableBody>\r\n            {this.renderTableRow(\"Current\", current, metricType, metricStatus)}\r\n            {this.renderTableRow(\"Limit\", limit, metricType)}\r\n            {this.renderTableRow(\"Goal\", goal, metricType)}\r\n            {this.renderTableRow(\"Wish\", wish, metricType)}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderTableRow = (name, value, metricType, metricStatus) => (\r\n    <TableRow key={name}>\r\n      <TableCell align=\"right\">\r\n        <Typography>{name}</Typography>\r\n      </TableCell>\r\n      <TableCell align=\"center\">\r\n        <Typography\r\n          className={classNames(colorStatusToClassNames(metricStatus))}\r\n        >\r\n          {this.renderValues(value, metricType)}\r\n        </Typography>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n\r\n  renderValues = (value, valueType) => {\r\n    if (value === undefined || value === null) {\r\n      return \"-\";\r\n    }\r\n\r\n    switch (valueType) {\r\n      case \"percentage\":\r\n        return `${value}%`;\r\n      case \"money\":\r\n        return `${value}€`;\r\n      case \"time\":\r\n        return this.getFormatedTime(value);\r\n      default:\r\n        return value;\r\n    }\r\n  };\r\n\r\n  calculateStatusGreater = (current, limit) => {\r\n    if (current * 0.96 > limit) return colorStatuses.GREEN;\r\n    if (current > limit) return colorStatuses.AMBER;\r\n    return colorStatuses.RED;\r\n  };\r\n\r\n  calculateStatusSmaller = (current, limit) => {\r\n    if (current * 1.05 < limit) return colorStatuses.GREEN;\r\n    if (current < limit) return colorStatuses.AMBER;\r\n    return colorStatuses.RED;\r\n  };\r\n\r\n  getFormatedTime = (totalSeconds) => {\r\n    const format = (val) => `${Math.floor(val)}`.slice(-2);\r\n    const hours = format(totalSeconds / 3600);\r\n    const minutes = format((totalSeconds % 3600) / 60);\r\n    const seconds = format(totalSeconds % 60);\r\n\r\n    let finalFormat = hours > 0 ? `${hours}h ` : \"\";\r\n    finalFormat += minutes > 0 ? `${minutes}m ` : \"\";\r\n    finalFormat += seconds > 0 ? `${seconds}s ` : \"\";\r\n\r\n    return finalFormat;\r\n  };\r\n}\r\n\r\nMetricTileContent.propTypes = {\r\n  current: PropTypes.number.isRequired,\r\n  configuration: metricConfiguration,\r\n};\r\n\r\nexport default MetricTileContent;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Typography,\r\n  CardHeader,\r\n} from \"@material-ui/core\";\r\nimport SentimentDissatisfiedIcon from \"@material-ui/icons/SentimentDissatisfied\";\r\nimport classNames from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\nimport { tileTypes } from \"../../constants\";\r\nimport { tileBasicData } from \"../../propTypes\";\r\nimport WeatherTileContent from \"../weatherTileContent\";\r\nimport MetricTileContent from \"../metricTileContent\";\r\nimport \"./styles.scss\";\r\n\r\nclass Tile extends React.Component {\r\n  render() {\r\n    const { basicData, data } = this.props;\r\n    const lastUpdated = data[0].addedOn;\r\n\r\n    return (\r\n      <Card\r\n        className={classNames(\"card\", {\r\n          metric: basicData.type === tileTypes.METRIC,\r\n          weather: basicData.type === tileTypes.WEATHER,\r\n        })}\r\n      >\r\n        <CardHeader className=\"card-header\" title={basicData.name} />\r\n        <CardContent>{this.renderTileContent(basicData.type)}</CardContent>\r\n        <CardActions m={0} disableSpacing>\r\n          <Box color=\"text.hint\" fontSize={12} textAlign=\"left\" top={100}>\r\n            Last updated:{\" \"}\r\n            {lastUpdated && moment(lastUpdated).format(\"DD.MM.YYYY HH:mm\")}\r\n          </Box>\r\n        </CardActions>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  renderTileContent = (type) => {\r\n    const { data, configuration } = this.props;\r\n\r\n    switch (type) {\r\n      case tileTypes.WEATHER:\r\n        return this.renderWeatherTileContent(data[0], data.slice(1));\r\n      case tileTypes.METRIC:\r\n        return this.renderMetricTileContent(data[0], configuration);\r\n      default:\r\n        return this.renderUnsupportedTile();\r\n    }\r\n  };\r\n\r\n  renderWeatherTileContent = (currentData, recentData) => (\r\n    <WeatherTileContent\r\n      temperature={currentData.temperature}\r\n      humidity={currentData.humidity}\r\n      data={recentData}\r\n    />\r\n  );\r\n\r\n  renderMetricTileContent = (data, configuration) => (\r\n    <MetricTileContent current={data.value} configuration={configuration} />\r\n  );\r\n\r\n  renderUnsupportedTile = () => (\r\n    <Box textAlign=\"center\">\r\n      <SentimentDissatisfiedIcon fontSize=\"large\" color=\"error\" />\r\n      <Typography color=\"error\">Unsupported Tile</Typography>\r\n    </Box>\r\n  );\r\n}\r\n\r\nTile.propTypes = {\r\n  basicData: tileBasicData.isRequired,\r\n  data: PropTypes.arrayOf(PropTypes.object),\r\n  configuration: PropTypes.object,\r\n  lastUpdated: PropTypes.string,\r\n};\r\n\r\nexport default Tile;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport _ from \"lodash\";\r\nimport { Box, Grid, Typography } from \"@material-ui/core\";\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport Tile from \"../tile\";\r\nimport config from \"../../../config\";\r\nimport \"./styles.css\";\r\n\r\nclass Dashboard extends React.Component {\r\n  state = { lastTilesAmount: 4, lastUpdatedTile: null };\r\n\r\n  displaySkeletons = () => {\r\n    const { lastTilesAmount } = this.state;\r\n    return [...Array(parseInt(lastTilesAmount)).keys()].map((x) => (\r\n      <Grid item key={x}>\r\n        <Skeleton variant=\"rect\" height={300} width={305} />\r\n      </Grid>\r\n    ));\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    const { getAllTiles } = this.props;\r\n    var lastTilesAmount = localStorage.getItem(\"lastTilesAmount\");\r\n    if (lastTilesAmount) {\r\n      this.setState({\r\n        lastTilesAmount,\r\n      });\r\n    }\r\n\r\n    this.refreshTileInterval = setInterval(\r\n      () => this.refreshTile(),\r\n      (config.dashboard.refreshInterval || 60) * 1000\r\n    );\r\n\r\n    getAllTiles();\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.refreshTileInterval);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { error, enqueueSnackbar, tiles, isLoadingMetrics } = this.props;\r\n    if (prevProps.error !== error && error) {\r\n      enqueueSnackbar(error, {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n\r\n    if (prevProps.tiles.length !== tiles.length && !isLoadingMetrics) {\r\n      localStorage.setItem(\"lastTilesAmount\", tiles.length);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { tiles, isLoadingMetrics } = this.props;\r\n\r\n    return (\r\n      <div className=\"main\">\r\n        <Typography variant=\"h2\" color=\"primary\">\r\n          <Box lineHeight={2} textAlign=\"center\">\r\n            {config.dashboard.name || \"Tiles\"}\r\n          </Box>\r\n        </Typography>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"center\"\r\n          alignItems=\"flex-start\"\r\n          className=\"dashboard-grid\"\r\n          spacing={4}\r\n        >\r\n          {isLoadingMetrics && this.displaySkeletons()}\r\n          {!isLoadingMetrics &&\r\n            tiles &&\r\n            tiles.map((tile) => (\r\n              <Grid item key={tile.name}>\r\n                <Tile\r\n                  basicData={{ name: tile.name, type: tile.type }}\r\n                  data={tile.data}\r\n                  configuration={tile.configuration}\r\n                  lastUpdated={tile.data[0].addedOn}\r\n                />\r\n              </Grid>\r\n            ))}\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  refreshTile = () => {\r\n    const { getTile, tiles } = this.props;\r\n    const { lastUpdatedTile } = this.state;\r\n    let tileToRefresh;\r\n\r\n    if (lastUpdatedTile) {\r\n      let tileIndex = _.findIndex(tiles, {\r\n        name: lastUpdatedTile.name,\r\n        type: lastUpdatedTile.type,\r\n      });\r\n\r\n      if (++tileIndex > tiles.length) {\r\n        tileIndex = 0;\r\n      }\r\n\r\n      tileToRefresh = tiles[tileIndex];\r\n    }\r\n\r\n    tileToRefresh = tileToRefresh || tiles[0];\r\n\r\n    getTile(tileToRefresh.name, tileToRefresh.type);\r\n    this.setState({\r\n      lastUpdatedTile: {\r\n        name: tileToRefresh.name,\r\n        type: tileToRefresh.type,\r\n      },\r\n    });\r\n  };\r\n}\r\n\r\nDashboard.propTypes = {\r\n  tiles: PropTypes.array,\r\n  isLoadingMetrics: PropTypes.bool.isRequired,\r\n  getAllTiles: PropTypes.func.isRequired,\r\n  getTile: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Dashboard;\r\n","import { connect } from \"react-redux\";\r\nimport { withSnackbar } from \"notistack\";\r\nimport { getAllTiles, getTile } from \"../actions\";\r\nimport Dashboard from \"../components/dashboard\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    tiles: state.tiles.items,\r\n    isLoadingMetrics: state.tiles.isLoadingMetrics,\r\n    error: state.tiles.error,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getAllTiles: () => dispatch(getAllTiles()),\r\n    getTile: (tileName, tileType) => dispatch(getTile(tileName, tileType)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withSnackbar(Dashboard));\r\n","import fetch from \"cross-fetch\";\r\nimport config from \"../config\";\r\nimport {\r\n  GET_ALL_TILES_REQUEST,\r\n  GET_ALL_TILES_COMPLETED,\r\n  GET_ALL_TILES_FAILED,\r\n  GET_TILE_REQUEST,\r\n  GET_TILE_COMPLETED,\r\n  GET_TILE_FAILED,\r\n} from \"./actionTypes\";\r\n\r\nexport function getAllTilesRequest() {\r\n  return { type: GET_ALL_TILES_REQUEST };\r\n}\r\n\r\nexport function getAllTilesCompleted(json) {\r\n  return {\r\n    type: GET_ALL_TILES_COMPLETED,\r\n    tiles: json,\r\n  };\r\n}\r\n\r\nexport function getAllTilesFailed(error) {\r\n  return {\r\n    type: GET_ALL_TILES_FAILED,\r\n    error: error,\r\n  };\r\n}\r\n\r\nexport function getTileRequest(tileName, tileType) {\r\n  return { type: GET_TILE_REQUEST, tileName, tileType };\r\n}\r\n\r\nexport function getTileCompleted(json, tileName, tileType) {\r\n  return { type: GET_TILE_COMPLETED, data: json, tileName, tileType };\r\n}\r\n\r\nexport function getTileFailed(error) {\r\n  return { type: GET_TILE_FAILED, error: error };\r\n}\r\n\r\nexport function getAllTiles() {\r\n  return function (dispatch) {\r\n    dispatch(getAllTilesRequest());\r\n\r\n    return fetch(`${config.api.URL}/tiles/all`)\r\n      .then((response) => {\r\n        if (response.status >= 400) {\r\n          throw new Error(\"Bad response from server\");\r\n        }\r\n\r\n        return response.json();\r\n      })\r\n      .then((json) => dispatch(getAllTilesCompleted(json)))\r\n      .catch((error) => dispatch(getAllTilesFailed(error.message)));\r\n  };\r\n}\r\n\r\nexport function getTile(tileName, tileType) {\r\n  return function (dispatch) {\r\n    dispatch(getTileRequest(tileName, tileType));\r\n\r\n    return fetch(`${config.api.URL}/tiles/${tileType}/${tileName}/recent`)\r\n      .then((response) => {\r\n        if (response.status >= 400) {\r\n          throw new Error(\"Bad response from server\");\r\n        }\r\n\r\n        return response.json();\r\n      })\r\n      .then((json) => dispatch(getTileCompleted(json, tileName, tileType)))\r\n      .catch((error) => dispatch(getTileFailed(error.message)));\r\n  };\r\n}\r\n","export const GET_ALL_TILES_REQUEST = \"GET_ALL_TILES_REQUEST\";\r\nexport const GET_ALL_TILES_COMPLETED = \"GET_ALL_TILES_COMPLETED\";\r\nexport const GET_ALL_TILES_FAILED = \"GET_ALL_TILES_FAILED\";\r\n\r\nexport const GET_TILE_REQUEST = \"GET_TILE_REQUEST\";\r\nexport const GET_TILE_COMPLETED = \"GET_TILE_COMPLETED\";\r\nexport const GET_TILE_FAILED = \"GET_TILE_FAILED\";\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n    primary: {\r\n      main: \"#6decb9\",\r\n    },\r\n  },\r\n  overrides: {\r\n    MuiTooltip: {\r\n      tooltip: {\r\n        fontSize: \"1em\",\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import {\r\n  GET_ALL_TILES_REQUEST,\r\n  GET_ALL_TILES_COMPLETED,\r\n  GET_ALL_TILES_FAILED,\r\n  GET_TILE_REQUEST,\r\n  GET_TILE_COMPLETED,\r\n  GET_TILE_FAILED,\r\n} from \"./actionTypes\";\r\n\r\nconst initialState = {\r\n  items: [],\r\n  isLoadingMetrics: false,\r\n  error: \"\",\r\n};\r\n\r\nexport function tilesReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ALL_TILES_REQUEST:\r\n      return {\r\n        ...state,\r\n        isLoadingMetrics: true,\r\n      };\r\n    case GET_ALL_TILES_COMPLETED:\r\n      return {\r\n        ...state,\r\n        items: action.tiles,\r\n        isLoadingMetrics: false,\r\n      };\r\n    case GET_ALL_TILES_FAILED:\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n        isLoadingMetrics: false,\r\n      };\r\n    case GET_TILE_REQUEST:\r\n      return {\r\n        ...state,\r\n      };\r\n    case GET_TILE_COMPLETED:\r\n      const { items } = state;\r\n\r\n      return {\r\n        ...state,\r\n        items: updateTileDataInArray(\r\n          items,\r\n          action.tileName,\r\n          action.tileType,\r\n          action.data\r\n        ),\r\n      };\r\n    case GET_TILE_FAILED:\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction updateTileDataInArray(tiles, tileName, tileType, data) {\r\n  return tiles.map((tile) => {\r\n    if (tile.name !== tileName || tile.type !== tileType) {\r\n      return tile;\r\n    }\r\n\r\n    const updatedTile = {\r\n      ...tile,\r\n      data: data,\r\n    };\r\n\r\n    return {\r\n      ...tile,\r\n      ...updatedTile,\r\n    };\r\n  });\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { tilesReducer } from \"./tiles/reducers\";\r\n\r\nexport default combineReducers({ tiles: tilesReducer });\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { Provider } from \"react-redux\";\r\nimport { SnackbarProvider } from \"notistack\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport Dashboard from \"./tiles/container/dashboard\";\r\nimport theme from \"./Theme/theme\";\r\nimport configStore from \"./configuration/configStore\";\r\nimport config from \"./config\";\r\n\r\nimport \"./App.scss\";\r\n\r\nconst store = configStore();\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Provider store={store}>\r\n        <div className=\"App\">\r\n          <Helmet>\r\n            <title>{config.dashboard.name || \"Tiles Dashboard\"}</title>\r\n          </Helmet>\r\n          <SnackbarProvider>\r\n            <Dashboard />\r\n          </SnackbarProvider>\r\n        </div>\r\n      </Provider>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport rootReducer from \"../rootReducer\";\r\n\r\nexport default function configureStore() {\r\n  const composeEnhancers =\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n  return createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunkMiddleware))\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import \"babel-polyfill\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}